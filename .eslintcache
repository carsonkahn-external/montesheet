[{"/Users/dps/proj/spreedsheet/src/index.js":"1","/Users/dps/proj/spreedsheet/src/serviceWorker.js":"2","/Users/dps/proj/spreedsheet/src/pages/_app.js":"3","/Users/dps/proj/spreedsheet/src/pages/not-found.js":"4","/Users/dps/proj/spreedsheet/src/pages/dashboard.js":"5","/Users/dps/proj/spreedsheet/src/components/Navbar.js":"6","/Users/dps/proj/spreedsheet/src/components/DashboardSection.js":"7","/Users/dps/proj/spreedsheet/src/components/Section.js":"8","/Users/dps/proj/spreedsheet/src/components/SectionHeader.js":"9","/Users/dps/proj/spreedsheet/src/components/SpreadsheetItems.js":"10","/Users/dps/proj/spreedsheet/src/jison/grammar.js":"11","/Users/dps/proj/spreedsheet/src/util/theme.js":"12","/Users/dps/proj/spreedsheet/src/components/BackgroundImage.js":"13"},{"size":437,"mtime":1612681274000,"results":"14","hashOfConfig":"15"},{"size":4971,"mtime":1612681274000,"results":"16","hashOfConfig":"15"},{"size":518,"mtime":1612766739726,"results":"17","hashOfConfig":"15"},{"size":307,"mtime":1612681274000,"results":"18","hashOfConfig":"15"},{"size":331,"mtime":1612681162880,"results":"19","hashOfConfig":"15"},{"size":2276,"mtime":1612722993163,"results":"20","hashOfConfig":"15"},{"size":652,"mtime":1612680654486,"results":"21","hashOfConfig":"15"},{"size":2485,"mtime":1612681274000,"results":"22","hashOfConfig":"15"},{"size":1357,"mtime":1612681274000,"results":"23","hashOfConfig":"15"},{"size":8689,"mtime":1612766724880,"results":"24","hashOfConfig":"15"},{"size":23044,"mtime":1612759832561,"results":"25","hashOfConfig":"15"},{"size":3134,"mtime":1612757566462,"results":"26","hashOfConfig":"15"},{"size":659,"mtime":1612722820269,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"17e2shm",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":2,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/dps/proj/spreedsheet/src/index.js",[],["57","58"],"/Users/dps/proj/spreedsheet/src/serviceWorker.js",[],"/Users/dps/proj/spreedsheet/src/pages/_app.js",[],"/Users/dps/proj/spreedsheet/src/pages/not-found.js",[],"/Users/dps/proj/spreedsheet/src/pages/dashboard.js",[],"/Users/dps/proj/spreedsheet/src/components/Navbar.js",[],"/Users/dps/proj/spreedsheet/src/components/DashboardSection.js",[],"/Users/dps/proj/spreedsheet/src/components/Section.js",[],"/Users/dps/proj/spreedsheet/src/components/SectionHeader.js",[],["59","60"],"/Users/dps/proj/spreedsheet/src/components/SpreadsheetItems.js",[],"/Users/dps/proj/spreedsheet/src/jison/grammar.js",["61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89"],"/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar grammar = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[1,7],$V5=[1,8],$V6=[1,10],$V7=[1,11],$V8=[1,12],$V9=[1,13],$Va=[1,14],$Vb=[1,15],$Vc=[1,16],$Vd=[5,6,7,8,9,10,11,12,14],$Ve=[5,6,7,14],$Vf=[5,6,7,8,9,14];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"expressions\":3,\"e\":4,\"EOF\":5,\"+\":6,\"-\":7,\"*\":8,\"/\":9,\"^\":10,\"!\":11,\"%\":12,\"(\":13,\")\":14,\"CELL\":15,\"NUMBER\":16,\"E\":17,\"PI\":18,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",6:\"+\",7:\"-\",8:\"*\",9:\"/\",10:\"^\",11:\"!\",12:\"%\",13:\"(\",14:\")\",15:\"CELL\",16:\"NUMBER\",17:\"E\",18:\"PI\"},\nproductions_: [0,[3,2],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,2],[4,2],[4,3],[4,1],[4,1],[4,1],[4,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n return $$[$0-1]; \nbreak;\ncase 2:\nthis.$ = $$[$0-2]+$$[$0];\nbreak;\ncase 3:\nthis.$ = $$[$0-2]-$$[$0];\nbreak;\ncase 4:\nthis.$ = $$[$0-2]*$$[$0];\nbreak;\ncase 5:\nthis.$ = $$[$0-2]/$$[$0];\nbreak;\ncase 6:\nthis.$ = Math.pow($$[$0-2], $$[$0]);\nbreak;\ncase 7:\n\n          this.$ = (function fact (n) { return n==0 ? 1 : fact(n-1) * n })($$[$0-1]);\n        \nbreak;\ncase 8:\nthis.$ = $$[$0-1]/100;\nbreak;\ncase 9:\nthis.$ = -$$[$0];\nbreak;\ncase 10:\nthis.$ = $$[$0-1];\nbreak;\ncase 11:\nthis.$ = Number(window.values[yytext]);\nbreak;\ncase 12:\nthis.$ = Number(yytext);\nbreak;\ncase 13:\nthis.$ = Math.E;\nbreak;\ncase 14:\nthis.$ = Math.PI;\nbreak;\n}\n},\ntable: [{3:1,4:2,7:$V0,13:$V1,15:$V2,16:$V3,17:$V4,18:$V5},{1:[3]},{5:[1,9],6:$V6,7:$V7,8:$V8,9:$V9,10:$Va,11:$Vb,12:$Vc},{4:17,7:$V0,13:$V1,15:$V2,16:$V3,17:$V4,18:$V5},{4:18,7:$V0,13:$V1,15:$V2,16:$V3,17:$V4,18:$V5},o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,14]),{1:[2,1]},{4:19,7:$V0,13:$V1,15:$V2,16:$V3,17:$V4,18:$V5},{4:20,7:$V0,13:$V1,15:$V2,16:$V3,17:$V4,18:$V5},{4:21,7:$V0,13:$V1,15:$V2,16:$V3,17:$V4,18:$V5},{4:22,7:$V0,13:$V1,15:$V2,16:$V3,17:$V4,18:$V5},{4:23,7:$V0,13:$V1,15:$V2,16:$V3,17:$V4,18:$V5},o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),{6:$V6,7:$V7,8:$V8,9:$V9,10:$Va,11:$Vb,12:$Vc,14:[1,24]},o($Ve,[2,2],{8:$V8,9:$V9,10:$Va,11:$Vb,12:$Vc}),o($Ve,[2,3],{8:$V8,9:$V9,10:$Va,11:$Vb,12:$Vc}),o($Vf,[2,4],{10:$Va,11:$Vb,12:$Vc}),o($Vf,[2,5],{10:$Va,11:$Vb,12:$Vc}),o([5,6,7,8,9,10,14],[2,6],{11:$Vb,12:$Vc}),o($Vd,[2,10])],\ndefaultActions: {9:[2,1]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* skip whitespace */\nbreak;\ncase 1:/* skip = */\nbreak;\ncase 2:return 16\nbreak;\ncase 3:return 15\nbreak;\ncase 4:return 8\nbreak;\ncase 5:return 9\nbreak;\ncase 6:return 7\nbreak;\ncase 7:return 6\nbreak;\ncase 8:return 10\nbreak;\ncase 9:return 11\nbreak;\ncase 10:return 12\nbreak;\ncase 11:return 13\nbreak;\ncase 12:return 14\nbreak;\ncase 13:return 18\nbreak;\ncase 14:return 17\nbreak;\ncase 15:return 5\nbreak;\ncase 16:return 'INVALID'\nbreak;\n}\n},\nrules: [/^(?:\\s+)/,/^(?:=)/,/^(?:[0-9]+(\\.[0-9]+)?\\b)/,/^(?:[A-Z][0-9]+)/,/^(?:\\*)/,/^(?:\\/)/,/^(?:-)/,/^(?:\\+)/,/^(?:\\^)/,/^(?:!)/,/^(?:%)/,/^(?:\\()/,/^(?:\\))/,/^(?:PI\\b)/,/^(?:E\\b)/,/^(?:$)/,/^(?:.)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = grammar;\nexports.Parser = grammar.Parser;\nexports.parse = function () { return grammar.parse.apply(grammar, arguments); };\nexports.main = function commonjsMain (args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}","/Users/dps/proj/spreedsheet/src/util/theme.js",[],"/Users/dps/proj/spreedsheet/src/components/BackgroundImage.js",[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"90","replacedBy":"94"},{"ruleId":"92","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":85,"column":1,"nodeType":"98","messageId":"99","endLine":130,"endColumn":2},{"ruleId":"100","severity":1,"message":"101","line":88,"column":1,"nodeType":"102","messageId":"103","endLine":88,"endColumn":7},{"ruleId":"104","severity":1,"message":"105","line":106,"column":49,"nodeType":"106","messageId":"107","endLine":106,"endColumn":51},{"ruleId":"108","severity":1,"message":"109","line":144,"column":35,"nodeType":"110","messageId":"111","endLine":144,"endColumn":41},{"ruleId":"108","severity":1,"message":"112","line":167,"column":14,"nodeType":"110","messageId":"111","endLine":167,"endColumn":22},{"ruleId":"113","severity":1,"message":"114","line":172,"column":5,"nodeType":"115","messageId":"116","endLine":180,"endColumn":11},{"ruleId":"117","severity":1,"message":"118","line":172,"column":5,"nodeType":"110","messageId":"119","endLine":172,"endColumn":17,"fix":"120"},{"ruleId":"108","severity":1,"message":"121","line":181,"column":48,"nodeType":"110","messageId":"111","endLine":181,"endColumn":49},{"ruleId":"104","severity":1,"message":"105","line":203,"column":98,"nodeType":"106","messageId":"107","endLine":203,"endColumn":100},{"ruleId":"96","severity":1,"message":"97","line":216,"column":9,"nodeType":"98","messageId":"99","endLine":276,"endColumn":10},{"ruleId":"100","severity":1,"message":"101","line":278,"column":5,"nodeType":"122","messageId":"103","endLine":278,"endColumn":17},{"ruleId":"108","severity":1,"message":"123","line":606,"column":5,"nodeType":"110","messageId":"111","endLine":606,"endColumn":12},{"ruleId":"96","severity":1,"message":"97","line":607,"column":1,"nodeType":"98","messageId":"99","endLine":642,"endColumn":2},{"ruleId":"100","severity":1,"message":"101","line":613,"column":1,"nodeType":"102","messageId":"103","endLine":613,"endColumn":7},{"ruleId":"100","severity":1,"message":"101","line":615,"column":1,"nodeType":"102","messageId":"103","endLine":615,"endColumn":7},{"ruleId":"100","severity":1,"message":"101","line":617,"column":1,"nodeType":"102","messageId":"103","endLine":617,"endColumn":7},{"ruleId":"100","severity":1,"message":"101","line":619,"column":1,"nodeType":"102","messageId":"103","endLine":619,"endColumn":7},{"ruleId":"100","severity":1,"message":"101","line":621,"column":1,"nodeType":"102","messageId":"103","endLine":621,"endColumn":7},{"ruleId":"100","severity":1,"message":"101","line":623,"column":1,"nodeType":"102","messageId":"103","endLine":623,"endColumn":7},{"ruleId":"100","severity":1,"message":"101","line":625,"column":1,"nodeType":"102","messageId":"103","endLine":625,"endColumn":7},{"ruleId":"100","severity":1,"message":"101","line":627,"column":1,"nodeType":"102","messageId":"103","endLine":627,"endColumn":7},{"ruleId":"100","severity":1,"message":"101","line":629,"column":1,"nodeType":"102","messageId":"103","endLine":629,"endColumn":7},{"ruleId":"100","severity":1,"message":"101","line":631,"column":1,"nodeType":"102","messageId":"103","endLine":631,"endColumn":7},{"ruleId":"100","severity":1,"message":"101","line":633,"column":1,"nodeType":"102","messageId":"103","endLine":633,"endColumn":7},{"ruleId":"100","severity":1,"message":"101","line":635,"column":1,"nodeType":"102","messageId":"103","endLine":635,"endColumn":7},{"ruleId":"100","severity":1,"message":"101","line":637,"column":1,"nodeType":"102","messageId":"103","endLine":637,"endColumn":7},{"ruleId":"100","severity":1,"message":"101","line":639,"column":1,"nodeType":"102","messageId":"103","endLine":639,"endColumn":7},{"ruleId":"100","severity":1,"message":"101","line":641,"column":1,"nodeType":"102","messageId":"103","endLine":641,"endColumn":7},{"ruleId":"124","severity":1,"message":"125","line":654,"column":8,"nodeType":"126","messageId":"127","endLine":654,"endColumn":18,"fix":"128"},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],["129"],["130"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'tstack' is assigned a value but never used.","Identifier","unusedVar","'popStack' is defined but never used.","no-labels","Unexpected labeled statement.","LabeledStatement","unexpectedLabel","no-unused-labels","'_token_stack:' is defined but never used.","unused",{"range":"131","text":"132"},"'a' is defined but never used.","ReturnStatement","'YYSTATE' is assigned a value but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"133","text":"134"},"no-global-assign","no-unsafe-negation",[6384,6406],"",[22438,22438],"()"]